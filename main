import re       
import sys
from ast import literal_eval
from collections import Counter

logfile = "SotM30-anton.log"
original_stdout = sys.stdout
pattern = re.compile('(?<=:).*')
lineformat = '{0:<20.20} {1:<25.25} {2:<25.25} {3}' 

with open('regexp.txt', 'r') as f:
    # Process regex line by line
    logtype = input("Enter log type: ")
    for line in f:

        # If line has search term, check it for more
        if logtype in line:
            p = pattern.findall(line)

        # If not, exit program
        else:
            print("Not found")
            sys.exit(0)

regex = literal_eval(p[0])
findpattern = re.compile(regex)



def process_log_file(logfile):
    # Process data file line by line
    filename = input("Enter the file name and extension: ")
    searchterm = input("Enter a search term: ")
    with open(filename, 'r') as data :
        seen = Counter()

        # Find all lines with search term and append them in a list
        for line in data :

            # If line has search term, check it for more
            if searchterm in line :
                seen.update(findpattern.findall(line))
    return seen

def print_counter(counter):
    with open('searchoutput.txt', 'w') as f:
        sys.stdout = f
        print(lineformat.format('-protocol-', '-source-', '-destination-', '-hitcount-'))
        for (protocol, _, _, src, _, _, dst), count in counter.most_common():
            sys.stdout = f
            print(lineformat.format(protocol, "  "+src, dst, count))
        sys.stdout = original_stdout


search_counter = process_log_file(logfile)
print_counter(search_counter)
